// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockrepositories

import (
	context "context"
	repositories "manage-user/repositories"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) CreateUser(ctx context.Context, user repositories.User) (interface{}, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.User) (interface{}, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.User) interface{}); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user repositories.User
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, user repositories.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 interface{}, _a1 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, repositories.User) (interface{}, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByID provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) DeleteUserByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type MockUserRepository_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) DeleteUserByID(ctx interface{}, id interface{}) *MockUserRepository_DeleteUserByID_Call {
	return &MockUserRepository_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", ctx, id)}
}

func (_c *MockUserRepository_DeleteUserByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUserByID_Call) Return(_a0 error) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_DeleteUserByID_Call) RunAndReturn(run func(context.Context, string) error) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetListUser provides a mock function with given fields: ctx
func (_m *MockUserRepository) GetListUser(ctx context.Context) ([]repositories.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListUser")
	}

	var r0 []repositories.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repositories.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repositories.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetListUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListUser'
type MockUserRepository_GetListUser_Call struct {
	*mock.Call
}

// GetListUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserRepository_Expecter) GetListUser(ctx interface{}) *MockUserRepository_GetListUser_Call {
	return &MockUserRepository_GetListUser_Call{Call: _e.mock.On("GetListUser", ctx)}
}

func (_c *MockUserRepository_GetListUser_Call) Run(run func(ctx context.Context)) *MockUserRepository_GetListUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserRepository_GetListUser_Call) Return(_a0 []repositories.User, _a1 error) *MockUserRepository_GetListUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetListUser_Call) RunAndReturn(run func(context.Context) ([]repositories.User, error)) *MockUserRepository_GetListUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByFilter provides a mock function with given fields: ctx, filter
func (_m *MockUserRepository) GetUserByFilter(ctx context.Context, filter repositories.User) ([]repositories.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByFilter")
	}

	var r0 []repositories.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.User) ([]repositories.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.User) []repositories.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.User) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByFilter'
type MockUserRepository_GetUserByFilter_Call struct {
	*mock.Call
}

// GetUserByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter repositories.User
func (_e *MockUserRepository_Expecter) GetUserByFilter(ctx interface{}, filter interface{}) *MockUserRepository_GetUserByFilter_Call {
	return &MockUserRepository_GetUserByFilter_Call{Call: _e.mock.On("GetUserByFilter", ctx, filter)}
}

func (_c *MockUserRepository_GetUserByFilter_Call) Run(run func(ctx context.Context, filter repositories.User)) *MockUserRepository_GetUserByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.User))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByFilter_Call) Return(_a0 []repositories.User, _a1 error) *MockUserRepository_GetUserByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByFilter_Call) RunAndReturn(run func(context.Context, repositories.User) ([]repositories.User, error)) *MockUserRepository_GetUserByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserByID provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) UpdateUserByID(ctx context.Context, user repositories.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_UpdateUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserByID'
type MockUserRepository_UpdateUserByID_Call struct {
	*mock.Call
}

// UpdateUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - user repositories.User
func (_e *MockUserRepository_Expecter) UpdateUserByID(ctx interface{}, user interface{}) *MockUserRepository_UpdateUserByID_Call {
	return &MockUserRepository_UpdateUserByID_Call{Call: _e.mock.On("UpdateUserByID", ctx, user)}
}

func (_c *MockUserRepository_UpdateUserByID_Call) Run(run func(ctx context.Context, user repositories.User)) *MockUserRepository_UpdateUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserByID_Call) Return(_a0 error) *MockUserRepository_UpdateUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_UpdateUserByID_Call) RunAndReturn(run func(context.Context, repositories.User) error) *MockUserRepository_UpdateUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
